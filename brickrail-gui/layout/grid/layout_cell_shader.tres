[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 background: hint_color;
uniform vec4 background_hover: hint_color;
uniform vec4 background_drawing_highlight: hint_color;
uniform vec4 track_base: hint_color;
uniform vec4 track_inner: hint_color;
uniform vec4 arrow_color: hint_color;
uniform vec4 occupied_color: hint_color;
uniform vec4 mark_color: hint_color;
uniform vec4 switch_color: hint_color;
uniform vec4 grid_color: hint_color;
uniform vec4 switch_inner_color: hint_color;
uniform vec4 selected_color: hint_color;
uniform vec4 hover_color: hint_color;
uniform vec4 block_color: hint_color;
uniform vec4 block_color_hover: hint_color;
uniform vec4 block_color_selected: hint_color;
uniform vec4 track_border_block: hint_color;

uniform bool cell_hover;
uniform bool cell_drawing_highlight;
uniform float grid_width;
uniform float track_width;
uniform float inner_track_width;
uniform float stopper_delta;
uniform float stopper_size;
uniform float stopper_width;
uniform float block_width;

uniform bool contours;
uniform bool has_switch;
uniform bool has_block;

uniform mat4 state_left;
uniform mat4 state_right;
uniform mat4 state_center;
uniform mat4 state_none;

const int STATE_SELECTED = 1;
const int STATE_HOVER = 2;
const int STATE_LOCKED = 4;
const int STATE_BLOCK_OCCUPIED = 16;
const int STATE_BLOCK = 8;
const int STATE_BLOCK_HOVER = 32;
const int STATE_BLOCK_SELECTED = 64;
const int STATE_BLOCK_PLUS = 2048;
const int STATE_BLOCK_MINUS = 4096;
const int STATE_CONNECTED = 128;
const int STATE_SWITCH = 256;
const int STATE_SWITCH_PRIORITY = 512;
const int STATE_ARROW = 1024;
const int STATE_MARK = 8192;
const int STATE_PORTAL = 16384;
const int STATE_STOPPER = 32768;
const int STATE_HIGHLIGHT = 65536;

const float PI = 3.14159265358979323846;

const int TRACK_LINE = 0;
const int TRACK_FULL = 1;
const int TRACK_BORDER = 2;
const int TRACK_ARROW = 3;
const int TRACK_BLOCK = 4;
const int TRACK_BLOCK_PLUS = 5;
const int TRACK_BLOCK_MINUS = 6;
const int TRACK_STOPPER = 7;
const int TRACK_PORTAL = 8;

const int TURN_BASE = 0;
const int TURN_SWITCH_ALL = 1;
const int TURN_SWITCH_PRIORITY = 2;
const int TURN_BLOCK = 3;


float circle(vec2 position, float radius) {
    return length(position) - radius;
}

float rectangle(vec2 position, vec2 size) {
    vec2 component_distance = abs(position) - size;
    float outside_distance = length(max(component_distance, 0.0));
    float inside_distance = min(max(component_distance.x, component_distance.y), 0.0);
    return outside_distance + inside_distance;
	// return component_distance.x;
}

vec2 translate(vec2 position, vec2 offset) {
	return position - offset;
}

vec2 rotate(vec2 position, float rotation) {
    float angle = rotation;
    float sine = sin(angle);
	float cosine = cos(angle);
    return vec2(cosine * position.x + sine * position.y, cosine * position.y - sine * position.x);
}

float ndot(vec2 a, vec2 b) {
	return a.x*b.x - a.y*b.y;
}

float rhombus(vec2 position, vec2 origin, float angle, vec2 b) {
	vec2 p = translate(position, origin);
	
	p = rotate(p, angle);

	vec2 q = abs(p);
    float h = clamp( (-2.0*ndot(q,b) + ndot(b,b) )/dot(b,b), -1.0, 1.0 );
    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );
    d *= sign( q.x*b.y + q.y*b.x - b.x*b.y );
    
	return d;
}

float pie(vec2 position, vec2 aperture, float radius)
{
    position.x = abs(position.x);
    float l = length(position) - radius;
	float m = length(position - aperture*clamp(dot(position,aperture),0.0,radius) );
    return max(l,m*sign(aperture.y*position.x-aperture.x*position.y));
}

float arc( vec2 p, float aperture, float orientation, float ra, float rb )
{
	vec2 scb = vec2(sin(aperture), cos(aperture));
	vec2 sca = vec2(sin(orientation), cos(orientation));
    p *= mat2(vec2(sca.x,sca.y), vec2(-sca.y,sca.x));
    p.x = abs(p.x);
    float k = (scb.y*p.x>scb.x*p.y) ? dot(p.xy,scb) : length(p);
    return sqrt( max(0.0, dot(p,p) + ra*ra - 2.0*ra*k ) ) - rb;
}

float track_arc( vec2 position, vec2 center, float radius, float start_angle, float delta_angle, float width) {
	float aperture = abs(delta_angle*0.5);
	float orientation = (-start_angle - delta_angle*0.5) + PI;
	position = translate(position, center);
	return arc(position, aperture, orientation, radius, width);
}

float merge(float shape1, float shape2) {
	return min(shape1, shape2);
}

float intersect(float shape1, float shape2) {
	return max(shape1, shape2);
}

float substract(float shape1, float shape2) {
	return intersect(shape1, -shape2);
}

float interpolate(float shape1, float shape2, float t) {
	return mix(shape1, shape2, t);
}

float segment( vec2 p, vec2 a, vec2 b )
{
    vec2 pa = p-a, ba = b-a;
    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
    return length( pa - ba*h );
}

float line( vec2 position, vec2 from, vec2 to, float width) {
	return segment(position, from, to) - width;
}

float line_rect(vec2 position, vec2 from, vec2 to, float width) {
	vec2 delta = to-from;
	vec2 rect_pos = position;
	rect_pos = translate(rect_pos, 0.5*(from+to));
	float angle = atan(delta.y, delta.x);
	rect_pos = rotate(rect_pos, angle);
	float rect = rectangle(rect_pos,vec2(length(delta)*0.5, width));
	return rect;
}

float track_connection(vec2 position, int from_slot, int to_slot, int turn_index, int track_type, out float t) {
	vec2 slot_positions[4] = {vec2(0.5, 0.0), vec2(1.0, 0.5), vec2(0.5, 1.0), vec2(0.0, 0.5)};

	float scene = 10.0;
	float width = track_width;
	if (track_type==TRACK_LINE || track_type==TRACK_BORDER || track_type==TRACK_BLOCK) {
		width = 0.0;
	}
	
	vec2 from_pos = slot_positions[from_slot];
	vec2 to_pos = slot_positions[to_slot];
	vec2 tangent = to_pos-from_pos;
	float angle = atan(tangent.y, tangent.x);
	vec2 normal = vec2(cos(angle+0.5*PI), sin(angle+0.5*PI));
	vec2 to_pos_opposite = slot_positions[(to_slot+2)%4];
	vec2 aligned = to_pos - to_pos_opposite;
	float this_angle = atan(tangent.y, tangent.x);
	float straight_angle = atan(aligned.y, aligned.x);
	float aligned_angle = this_angle - straight_angle;
	while (aligned_angle > PI) {
		aligned_angle -= 2.0*PI;
	}
	while (aligned_angle < -PI) {
		aligned_angle += 2.0*PI;
	}
	int track_alignment = int(sign(aligned_angle));
	// track_alignment = -1;
	int curve_index = turn_index-track_alignment;
	float radius;
	float start_angle;
	float delta_angle;
	vec2 center;
	start_angle = this_angle - 0.5*PI*float(sign(curve_index));
	delta_angle = float(curve_index)*PI/4.0;
	float t_sign = sign(dot(to_pos, vec2(1.1,1.0)));

	if (track_type == TRACK_ARROW) {
		vec2 arrowdims = vec2(1.5,0.9);
		float rhomb = rhombus(position, 0.5*(from_pos+to_pos), angle, inner_track_width*arrowdims);
		float rhomb2 = rhombus(position, 0.5*(from_pos+to_pos), angle, inner_track_width*vec2(0.3,1.0)*arrowdims);
		float mask = line_rect(position, from_pos, 0.5*(from_pos+to_pos), 1.0);
		scene = substract(rhomb, rhomb2);
		//scene = rhomb;
		scene = substract(scene, mask);
		return scene;
	}
	if (track_type == TRACK_BLOCK_PLUS) {
		scene = 20.0;
		float size = (block_width-track_width)*0.5;
		float swidth = 0.3*size;
		for (int s=-1; s<3; s+=2) {
			vec2 sign_pos = 0.5*(from_pos+to_pos) + float(s)*normal*(track_width + 0.5*(block_width-track_width));
			float hbar = line_rect(position, sign_pos-size*normalize(tangent), sign_pos+size*normalize(tangent), swidth);
			float vbar = line_rect(position, sign_pos-size*normal, sign_pos+size*normal, swidth);
			scene = merge(scene, hbar);
			scene = merge(scene, vbar);
		}
		float mask = line_rect(position, from_pos, 0.5*(from_pos+to_pos), 1.0);
		return scene;
	}
	if (track_type == TRACK_BLOCK_MINUS) {
		scene = 20.0;
		float size = (block_width-track_width)*0.5;
		float swidth = 0.3*size;
		for (int s=-1; s<3; s+=2) {
			vec2 sign_pos = 0.5*(from_pos+to_pos) + float(s)*normal*(track_width + 0.5*(block_width-track_width));
			float hbar = line_rect(position, sign_pos-size*normalize(tangent), sign_pos+size*normalize(tangent), swidth);
			scene = merge(scene, hbar);
		}
		float mask = line_rect(position, from_pos, 0.5*(from_pos+to_pos), 1.0);
		return scene;
	}
	if (turn_index == 2) {
		if (track_type == TRACK_FULL) {
			vec2 end_pos = from_pos+tangent*(stopper_delta+stopper_width);
			float round_straight = line(position, from_pos+tangent*0.5, end_pos - normalize(tangent)*track_width, width);
			scene = merge(scene, round_straight);
			// float endcap = circle(position-from_pos-tangent*0.5, width);
			// scene = merge(scene, endcap);
		}
		if (track_type == TRACK_STOPPER) {
			vec2 stopper_pos = from_pos+tangent*stopper_delta;
			float stopper = line(position, stopper_pos-normal*track_width*stopper_size, stopper_pos+normal*track_width*stopper_size, stopper_width);
			scene = merge(scene, stopper);
			return scene;
		}
		if (track_type == TRACK_PORTAL) {
			vec2 stopper_pos = from_pos+tangent*stopper_delta;
			float stopper = line(position, stopper_pos-track_width*tangent*0.5, stopper_pos-track_width*tangent*0.5, track_width*1.5);
			scene = merge(scene, stopper);
			return scene;
		}
		if (track_type == TRACK_BLOCK) {
			float rhomb = rhombus(position, 0.5*(from_pos+to_pos), angle, vec2(block_width-0.2))-0.2;
			scene = merge(scene, rhomb);
			return scene;
		}
	}
	else if (abs(curve_index)==2) {
		radius = 0.25*sqrt(2.0);
		center = from_pos + aligned*0.5;
		float connection = track_arc(position, center, radius, start_angle, delta_angle, width);
		scene = merge(scene, connection);
	}
	else if (abs(curve_index)==1) {
		radius = 0.5+sqrt(2.0)*0.25;
		float center_angle = this_angle + 0.5*PI*float(sign(curve_index));
		center = from_pos + tangent*0.5 + vec2(cos(center_angle), sin(center_angle))*radius;
		if (dot(tangent,aligned) > 0.99) {
			center += tangent*0.25*(2.0-sqrt(2.0));
			float straight = line(position, from_pos+tangent*0.5, to_pos-tangent*(0.25*sqrt(2.0)),width);
			scene = merge(scene, straight);
		}
		float connection = track_arc(position, center, radius, start_angle, delta_angle, width);
		scene = merge(scene, connection);
	}
	else if (curve_index == 0) {
		float straight = line(position, from_pos+tangent*0.5, to_pos+tangent, width);
		scene = merge(scene, straight);
		t = t_sign*dot(position-from_pos, tangent);
		// float endcap = circle(position-from_pos-tangent*0.5, width);
		// scene = merge(scene, endcap);
	}
	
	if (track_type == TRACK_BORDER) {
		float inner = scene - inner_track_width;
		float outer = scene - track_width;
		scene = substract(outer, inner);
		float center_substract = line_rect(position, from_pos+tangent*0.5,from_pos, track_width);
		if (abs(tangent.x) < 0.0005 || abs(tangent.y) < 0.0005) {
			center_substract = line_rect(position, from_pos+tangent*(0.5+track_width),from_pos, track_width*1.05);
		}
		scene = substract(scene, center_substract);
	}
	if (track_type == TRACK_BLOCK) {
		scene = scene - block_width;
		float mask = line_rect(position, from_pos, 0.5*(from_pos+to_pos),1.0);
		scene = substract(scene, mask);
		float rhomb = rhombus(position, 0.5*(from_pos+to_pos), angle, vec2(block_width-0.2))-0.2;
		scene = merge(scene, rhomb);
	}
	
	return scene;
	
}

float tracks(vec2 position, int turn_type, int track_type, out int state, out float t) {
	
	state = 0;
	
	float scene = 10.0;
	
	vec4 basis[4] = {vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)};
	
	for (int from_slot=0; from_slot<4; from_slot++) {
		vec4 from_vec = basis[from_slot];
		for (int to_slot=0; to_slot<3; to_slot++) {
			vec4 to_vec = basis[to_slot];
			
			int to_slot2 = to_slot;
			if (from_slot == to_slot) {
				to_slot2 = 3;
			}
			
			int turn_state[4];
			turn_state[0] = int(dot(to_vec, state_left*from_vec));
			turn_state[1] = int(dot(to_vec, state_center*from_vec));
			turn_state[2] = int(dot(to_vec, state_right*from_vec));
			turn_state[3] = int(dot(to_vec, state_none*from_vec));
			
			float connection;
			float width = track_width;
			for (int flag=0; flag<4; flag++) {
				int turn = flag-1;
				if ((turn_state[flag] & turn_type) != turn_type) {
					if (flag < 3) {
						continue;
					}
				}
				float temp_t;
				connection = track_connection(position, from_slot, to_slot2, turn, track_type, temp_t);
				int temp_state = turn_state[flag];
				if (connection<0.002) {
					state |= temp_state;
					t = temp_t;
				}
				if ((turn_state[flag] & turn_type) == turn_type) {
					scene = merge(scene, connection);
				}
			}
	
		}
	}
	
	return scene;
}

vec4 get_inner_color(int state) {
	vec4 color;
	color = track_inner;
	if ((state & STATE_BLOCK_OCCUPIED) == STATE_BLOCK_OCCUPIED) {
		color = occupied_color;
	}
	if ((state & STATE_MARK) == STATE_MARK) {
		color = mark_color;
	}
	if ((state & STATE_LOCKED) == STATE_LOCKED) {
		color = occupied_color;
	}
	if ((state & STATE_SELECTED) == STATE_SELECTED) {
		color = selected_color;
	}
	if ((state & STATE_HOVER)== STATE_HOVER) {
		color *= 2.0;
	}
	else if ((state & STATE_HIGHLIGHT) == STATE_HIGHLIGHT) {
		color *= 1.5;
	}
	return color;
}

vec4 get_block_color(int state) {
	vec4 color = block_color;
	if ((state & STATE_BLOCK_SELECTED)==STATE_BLOCK_SELECTED) {
		color = selected_color;
	}
	if ((state & STATE_BLOCK_HOVER)==STATE_BLOCK_HOVER) {
		color *= 1.5;
	}
	return color;
}

vec4 get_border_color(int state) {
	vec4 color = track_base;
	return color;
}

vec4 get_arrow_color(int state) {
	vec4 color = arrow_color;
	return color;
}

float mix_sdf(float sdf, inout vec4 base_color, vec4 color_sdf) {
	float sdf_change = fwidth(sdf)*0.5;
	float t = smoothstep(sdf_change, -sdf_change, sdf);
	base_color = mix(base_color, color_sdf, t);
	return t;
}

void fragment() {
	vec4 color_mix;
	color_mix = background;
	if (cell_hover) {
		color_mix = background_hover;
	}
	if (cell_drawing_highlight) {
		color_mix = background_drawing_highlight;
	}
	vec2 position = UV;
	float border_dist = min(position.x, min(position.y, min(1.0-position.x, 1.0-position.y)));
	if (border_dist<grid_width*0.5) {
		color_mix = grid_color;
	}
	
	int block_state;
	float dummy_t;
	float block = tracks(position, STATE_BLOCK, TRACK_BLOCK, block_state, dummy_t)+0.002; // add constant for antialiasing state issues. could also fix this with a border
	mix_sdf(block, color_mix, get_block_color(block_state));
	
	if ((block_state & STATE_BLOCK_PLUS) == STATE_BLOCK_PLUS) {
		int dummy_state;
		float plus = tracks(position, STATE_BLOCK_PLUS, TRACK_BLOCK_PLUS, dummy_state, dummy_t);
		mix_sdf(intersect(plus, block), color_mix, track_inner);
	}
		if ((block_state & STATE_BLOCK_MINUS) == STATE_BLOCK_MINUS) {
		int dummy_state;
		float plus = tracks(position, STATE_BLOCK_MINUS, TRACK_BLOCK_MINUS, dummy_state, dummy_t);
		mix_sdf(intersect(plus, block), color_mix, track_inner);
	}
	
	int track_state;
	int track_state_stopper;
	float track_t;
	float base = tracks(position, STATE_CONNECTED, TRACK_FULL, track_state, track_t) + 0.002;
	float stopper = tracks(position, STATE_STOPPER, TRACK_STOPPER, track_state_stopper, dummy_t) + 0.002;
	float portal = tracks(position, STATE_PORTAL, TRACK_PORTAL, track_state_stopper, dummy_t) + 0.002;
	int state = track_state;
	base = merge(base, stopper);
	float t = mix_sdf(merge(base, portal), color_mix, get_border_color(state));
	
	int state_dummy;
	if (base < 0.005) {
	
		float inner = base + track_width - inner_track_width;
		mix_sdf(inner, color_mix, get_inner_color(state));
		
		if ((state & STATE_ARROW) == STATE_ARROW) {
			float arrow = tracks(position, STATE_ARROW, TRACK_ARROW, state_dummy, dummy_t);
			mix_sdf(arrow, color_mix, get_arrow_color(state));
		}
		
		if (has_switch && t > 0.0) {
			float turn_outer = tracks(position, STATE_SWITCH, TRACK_BORDER, state_dummy, dummy_t);
			
			float switch_outer = intersect(turn_outer, inner);
			float switch_base = tracks(position, STATE_SWITCH_PRIORITY, TRACK_LINE, state_dummy, dummy_t);
			
			float arrow_cap = clamp(20.0*(border_dist-0.02), -1.0, 1.0);
			float arrow_modulate = (border_dist<0.4) ? arrow_cap : -1.0;
			arrow_modulate = arrow_cap  * clamp(20.0*(-border_dist+0.25), -1.0, 1.0);
			// arrow_modulate = sqrt(max(1.0-(1.0-arrow_modulate)*(1.0-arrow_modulate),0.0));
			float switch_arrows = switch_base - (arrow_modulate)*inner_track_width*0.4;
			
			mix_sdf(switch_outer, color_mix, switch_color);
			mix_sdf(switch_arrows, color_mix, switch_color);
		}
	}
	COLOR = color_mix;
	
	if (contours) {
		COLOR = vec4(1);
		float dist = base;
		vec3 col = vec3(1.0) - sign(dist)*vec3(0.1,0.4,0.7);
		col *= 1.0 - exp(-2.0*abs(dist));
		col *= 0.8 + 0.2*cos(128.0*abs(dist));
		col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(dist)) );
		COLOR.rgb = col;
	}
}"

[resource]
shader = SubResource( 1 )
shader_param/background = Color( 0.105882, 0.109804, 0.121569, 1 )
shader_param/background_hover = Color( 0.109804, 0.188235, 0.262745, 1 )
shader_param/background_drawing_highlight = null
shader_param/track_base = Color( 1, 1, 1, 1 )
shader_param/track_inner = Color( 0.54902, 0.980392, 1, 1 )
shader_param/arrow_color = Color( 0.0666667, 0.0588235, 0.164706, 1 )
shader_param/occupied_color = Color( 0.945098, 0, 1, 1 )
shader_param/mark_color = Color( 0.2, 0, 0.4, 1 )
shader_param/switch_color = Color( 0.219608, 0.517647, 0.803922, 1 )
shader_param/grid_color = Color( 0.0352941, 0.0352941, 0.0392157, 1 )
shader_param/switch_inner_color = Color( 0.509804, 0.87451, 1, 1 )
shader_param/selected_color = Color( 0.133333, 0.615686, 0.647059, 1 )
shader_param/hover_color = Color( 0, 0.368627, 1, 1 )
shader_param/block_color = Color( 0.788235, 0.976471, 0.00392157, 1 )
shader_param/block_color_hover = Color( 1, 0.470588, 0, 1 )
shader_param/block_color_selected = Color( 0.560784, 0.0941176, 0, 1 )
shader_param/track_border_block = Color( 0.321569, 0.494118, 0.0470588, 1 )
shader_param/cell_hover = false
shader_param/cell_drawing_highlight = null
shader_param/grid_width = 0.097
shader_param/track_width = 0.126
shader_param/inner_track_width = 0.062
shader_param/stopper_delta = 0.677
shader_param/stopper_size = 0.563
shader_param/stopper_width = 0.11
shader_param/block_width = 0.239
shader_param/contours = false
shader_param/has_switch = true
shader_param/has_block = true
shader_param/state_left = Transform( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )
shader_param/state_right = Transform( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )
shader_param/state_center = Transform( 0, 0, 128, 0, 128, 0, 128, 0, 0, 0, 128, 0 )
shader_param/state_none = Transform( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )
